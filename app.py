# -*- coding: utf-8 -*-
"""emma.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15YsDsyz4O2f8ZRb0WDs_4iQUYaPpnzvj
"""
from flask import Flask, request, render_template_string, redirect, url_for
import csv
import os

app = Flask(__name__)

# Caminho do arquivo CSV para armazenar as respostas
csv_file_path = 'user_data.csv'

# Verifica se o arquivo CSV existe; se nÃ£o, cria-o com os cabeÃ§alhos
if not os.path.exists(csv_file_path):
    with open(csv_file_path, mode='w', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(["Nome", "Setor"])

# Emoji de rosto humano
face_emoji = "ðŸ‘¤"

# Inicializa o histÃ³rico de chat como uma lista vazia
chat_history = []
conversation_state = {"stage": 0, "name": "", "sector": ""}

@app.route('/', methods=['GET', 'POST'])
def home():
    global chat_history, conversation_state

    if request.method == 'POST':
        user_input = request.form['user_input']
        
        if conversation_state["stage"] == 0:
            conversation_state["name"] = user_input
            chat_history.append(f"{face_emoji}: {user_input}")
            chat_history.append("ðŸ¤– Emabot: Qual seu setor?")
            conversation_state["stage"] = 1
            
        elif conversation_state["stage"] == 1:
            conversation_state["sector"] = user_input
            chat_history.append(f"{face_emoji}: {user_input}")
            chat_history.append("ðŸ¤– Emabot: Obrigado pelas respostas. Sou sua assistente de busca... Como posso ajudar? Fale comigo somente por palavras-chave. Exemplo: Processos..")
            conversation_state["stage"] = 2

            # Salva os dados do usuÃ¡rio no arquivo CSV
            with open(csv_file_path, mode='a', newline='') as file:
                writer = csv.writer(file)
                writer.writerow([conversation_state["name"], conversation_state["sector"]])
            
        else:
            chat_history.append(f"{face_emoji}: {user_input}")
            results = search_in_spreadsheet(user_input)
            if results:
                chat_history.append("ðŸ¤– Emabot: Documentos encontrados:")
                for result in results:
                    chat_history.append(f"ðŸ“„ <a href='/get_link?title={result['TÃ­tulo do documento']}'> {result['TÃ­tulo do documento']}</a>")
            else:
                chat_history.append("ðŸ¤– Emabot: Nenhum documento encontrado com essas palavras-chave.")
        
    else:
        if conversation_state["stage"] == 0:
            chat_history = ["ðŸ¤– Emabot: OlÃ¡, me chamo Emaboot da Diplan, qual seu nome?"]
    
    return render_template_string('''
        <h1>Emabot da Diplan</h1>
        <div style="border:1px solid #ccc; padding:10px; margin-bottom:10px;">
            {% for message in chat_history %}
                <p>{{ message | safe }}</p>
            {% endfor %}
        </div>
        <form method="post" action="/">
            <label for="user_input">Digite sua mensagem:</label><br>
            <input type="text" id="user_input" name="user_input" style="width:80%">
            <input type="submit" value="Enviar">
        </form>
    ''', chat_history=chat_history)

@app.route('/get_link', methods=['GET'])
def get_link():
    global chat_history
    title = request.args.get('title')
    result = df[df['TÃ­tulo do documento'] == title]
    if not result.empty:
        link = result['Link Qualyteam'].values[0]
        chat_history.append(f"ðŸ¤– Emabot: Aqui estÃ¡ o link para '{title}': <a href='{link}' target='_blank'>{link}</a>")
    else:
        chat_history.append("ðŸ¤– Emabot: Link nÃ£o encontrado para o tÃ­tulo selecionado.")
    
    return redirect(url_for('home'))

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
