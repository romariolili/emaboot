# -*- coding: utf-8 -*-
"""emma.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15YsDsyz4O2f8ZRb0WDs_4iQUYaPpnzvj
"""
from flask import Flask, request, render_template_string, session
import pandas as pd
import os
from unidecode import unidecode

app = Flask(__name__)

# ConfiguraÃ§Ã£o da chave secreta para a sessÃ£o
app.secret_key = 'sua_chave_secreta_aqui'

# Caminho do arquivo no servidor
file_path = 'teste 1.xlsx'

# Verifica se o arquivo existe
if os.path.exists(file_path):
    # Carregar a planilha Excel, incluindo a coluna "Data elaboraÃ§Ã£o"
    df = pd.read_excel(file_path)
else:
    df = pd.DataFrame(columns=["Palavras chaves", "TÃ­tulo do documento", "Link Qualyteam", "Resumo", "Data elaboraÃ§Ã£o"])

# Emoji de rosto humano
face_emoji = "ðŸ˜Š"

# FunÃ§Ã£o para normalizar o texto, removendo acentuaÃ§Ã£o e convertendo para minÃºsculas
def normalize(text):
    return unidecode(text.strip().lower()) if text else ""

# FunÃ§Ã£o de busca na planilha focada em palavras-chave
def search_in_spreadsheet(term):
    normalized_term = normalize(term)

    # Filtra as linhas onde a palavra-chave normalizada estÃ¡ contida em "Palavras chaves"
    results = df[df['Palavras chaves'].apply(lambda x: normalized_term in normalize(str(x)))]

    if not results.empty:
        return results[['TÃ­tulo do documento', 'Link Qualyteam', 'Resumo', 'Data elaboraÃ§Ã£o']].to_dict('records')
    else:
        return []

# FunÃ§Ã£o para inicializar o histÃ³rico de chat na sessÃ£o
def initialize_chat_history():
    # Inicializa o histÃ³rico de chat na sessÃ£o se ainda nÃ£o estiver presente
    session['chat_history'] = [
        "ðŸ¤– Emabot: OlÃ¡, me chamo Emaboot da Diplan. Sou sua assistente de busca de documentos. Como posso ajudar? Digite uma palavra-chave."
    ]
    return session['chat_history']

# Rota principal
@app.route('/', methods=['GET', 'POST'])
def home():
    # Sempre inicializa o histÃ³rico de chat ao carregar a pÃ¡gina
    if request.method == 'GET':
        # Limpa o histÃ³rico de chat na sessÃ£o
        session.pop('chat_history', None)
        initialize_chat_history()

    chat_history = session.get('chat_history', [])

    if request.method == 'POST':
        user_input = request.form['user_input'].strip()

        # Verifica se a entrada contÃ©m mais de uma palavra (indicando uma frase)
        if len(user_input.split()) > 1:
            chat_history.append(f"{face_emoji}: {user_input}")
            chat_history.append("ðŸ¤– Emabot: Por favor, use apenas palavras-chave para realizar a busca.")
        else:
            if user_input:
                chat_history.append(f"{face_emoji}: {user_input}")
                results = search_in_spreadsheet(user_input)
                if results:
                    chat_history.append("ðŸ¤– Emabot: Documentos encontrados:")
                    for result in results:
                        chat_history.append(f"ðŸ“„ <a href='/get_link?title={result['TÃ­tulo do documento']}'>{result['TÃ­tulo do documento']}</a>")
                else:
                    chat_history.append("ðŸ¤– Emabot: Nenhum documento encontrado com a palavra-chave fornecida.")
            else:
                chat_history.append("ðŸ¤– Emabot: Por favor, insira uma palavra-chave para realizar a busca.")

        session['chat_history'] = chat_history

    return render_template_string(template, chat_history=chat_history)

# Rota para obter o link do documento
@app.route('/get_link', methods=['GET'])
def get_link():
    title = request.args.get('title')
    result = df[df['TÃ­tulo do documento'] == title]
    chat_history = initialize_chat_history()
    if not result.empty:
        link = result['Link Qualyteam'].values[0] if pd.notna(result['Link Qualyteam'].values[0]) else "Link indisponÃ­vel"
        resumo = result['Resumo'].values[0] if pd.notna(result['Resumo'].values[0]) else "Resumo nÃ£o disponÃ­vel"
        data_atualizacao = result['Data elaboraÃ§Ã£o'].values[0].strftime('%d/%m/%Y') if pd.notna(result['Data elaboraÃ§Ã£o'].values[0]) else "Data nÃ£o disponÃ­vel"
        chat_history.append(f"ðŸ¤– Emabot: Aqui estÃ¡ o link para '{title}': <a href='{link}' target='_blank'>{link}</a>")
        chat_history.append(f"ðŸ“… Data de AtualizaÃ§Ã£o: {data_atualizacao}")
        chat_history.append(f"ðŸ“„ Resumo: {resumo} <button onclick='speakText(`{resumo}`)'>ðŸ”Š Ouvir</button>")
    else:
        chat_history.append("ðŸ¤– Emabot: Link nÃ£o encontrado para o tÃ­tulo selecionado.")

    session['chat_history'] = chat_history

    return render_template_string(template, chat_history=chat_history)

# Template HTML com a imagem de fundo, VLibras, Text-to-Speech, e Rolagem AutomÃ¡tica adicionados
template = '''
<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Emabot da Diplan</title>

    <!-- Script do VLibras -->
    <script src="https://vlibras.gov.br/app/vlibras-plugin.js"></script>
    <script>
        new window.VLibras.Widget('https://vlibras.gov.br/app');
    </script>

    <style>
        /* Estilos gerais */
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-image: url('/static/images/Imagem de fundo.png');
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
            color: white;
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            box-sizing: border-box;
        }
        /* Container principal */
        .container {
            display: flex;
            max-width: 1200px;
            width: 100%;
            margin: 0 auto;
            padding: 20px;
            justify-content: flex-start;
            flex-direction: column;
            height: 100%;
            box-sizing: border-box;
        }
        /* Caixa de Chat - VersÃ£o Desktop */
        .chat-box {
            width: 100%;
            max-width: 600px;
            background-color: rgba(0, 0, 51, 0.8);
            padding: 20px;
            border-radius: 8px;
            box-sizing: border-box;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            align-self: flex-start;
            margin-top: 10%;
            height: auto;
            max-height: 70vh;
        }
        /* Estilos para histÃ³rico de chat */
        .chat-history {
            border: 1px solid #ccc;
            padding: 10px;
            height: auto;
            max-height: 200px;
            overflow-y: auto;
            margin-bottom: 10px;
            border-radius: 4px;
            background-color: rgba(255, 255, 255, 0.1);
            box-sizing: border-box;
        }
        /* Texto do histÃ³rico */
        .chat-history p {
            margin: 5px 0;
            color: white;
            word-wrap: break-word;
        }
        /* Campo de entrada e botÃ£o de envio */
        .user-input {
            display: flex;
            align-items: center;
            width: 100%;
            box-sizing: border-box;
        }
        .user-input input[type="text"] {
            flex-grow: 1;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
            font-size: 1em;
            color: black;
            box-sizing: border-box;
        }
        .user-input input[type="submit"] {
            padding: 10px 20px;
            margin-left: 10px;
            border: none;
            background-color: #3498db;
            color: #fff;
            border-radius: 4px;
            font-size: 1em;
            cursor: pointer;
            box-sizing: border-box;
        }
        .user-input input[type="submit"]:hover {
            background-color: #2980b9;
        }
        /* Estilos para links */
        a {
            color: white;
            text-decoration: underline;
        }
        a:hover {
            color: #ccc;
        }
        /* Estilos para o indicador de carregamento */
        #loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(255, 255, 255, 0.8);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 9999;
            font-size: 1.5em;
            color: #333;
        }
        /* AnimaÃ§Ã£o de rotaÃ§Ã£o */
        @keyframes spin {
            from {transform: rotate(0deg);}
            to {transform: rotate(360deg);}
        }
        .spinner {
            border: 8px solid #f3f3f3;
            border-top: 8px solid #3498db;
            border-radius: 50%;
            width: 60px;
            height: 60px;
            animation: spin 1s linear infinite;
            margin-bottom: 20px;
        }
    </style>
</head>
<body>
    <!-- Inclui o Plugin do VLibras -->
    <div vw class="enabled">
        <div vw-access-button class="active"></div>
        <div vw-plugin-wrapper>
            <div class="vw-plugin-top-wrapper"></div>
        </div>
    </div>

    <div id="loading-overlay">
        <div class="spinner"></div>
        <div>Analisando...</div>
    </div>

    <div class="container">
        <div class="chat-box">
            <h1>Emabot da Diplan</h1>
            <div class="chat-history" id="chat-history">
                {% for message in chat_history %}
                    <p>{{ message | safe }}</p>
                {% endfor %}
            </div>
            <form method="post" action="/" onsubmit="showLoading()">
                <div class="user-input">
                    <input type="text" id="user_input" name="user_input" placeholder="Digite sua palavra-chave ou frase aqui...">
                    <input type="submit" value="Enviar">
                </div>
            </form>
        </div>
    </div>

    <script>
        function showLoading() {
            document.getElementById('loading-overlay').style.display = 'flex';
        }

        function speakText(text) {
            if ('speechSynthesis' in window) {
                const utterance = new SpeechSynthesisUtterance(text);
                utterance.lang = 'pt-BR';
                speechSynthesis.speak(utterance);
            } else {
                alert("Seu navegador nÃ£o suporta a API de sÃ­ntese de fala.");
            }
        }

        window.onload = function() {
            var chatHistory = document.getElementById("chat-history");
            chatHistory.scrollTop = chatHistory.scrollHeight;
        }
    </script>
</body>
</html>
'''

if __name__ == "__main__":
    app.run(debug=True)
